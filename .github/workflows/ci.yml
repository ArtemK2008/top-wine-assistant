name: CI

on:
  push:
    branches: [ main, master, develop, 'feature/**' ]
  pull_request:
    branches: [ main, master, develop ]
  workflow_dispatch: { }

jobs:
  build:
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:16
        env:
          POSTGRES_DB: topwine
          POSTGRES_USER: topwine
          POSTGRES_PASSWORD: topwine
        # Map container 5432 -> host 5432 so we can use localhost:5432
        ports:
          - 5432:5432
        options: >-
          --health-cmd="pg_isready -U topwine -d topwine"
          --health-interval=5s
          --health-timeout=3s
          --health-retries=60

      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd="redis-cli ping || exit 1"
          --health-interval=5s
          --health-timeout=3s
          --health-retries=60

    permissions:
      contents: read

    env:
      SPRING_PROFILES_ACTIVE: dev

      # --- DB ---
      DB_HOST: 127.0.0.1
      DB_PORT: 5432
      DB_NAME: topwine
      DB_USER: topwine
      DB_PASSWORD: topwine

      # --- REDIS ---
      REDIS_HOST: 127.0.0.1
      REDIS_PORT: 6379

      # optional: silence health if desired (maps to management.health.redis.enabled=false)
      MANAGEMENT_HEALTH_REDIS_ENABLED: false

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: '21'
          cache: gradle

      - name: Normalize gradlew line endings & make executable
        run: |
          sed -i 's/\r$//' gradlew
          chmod +x gradlew

      - name: Gradle version
        run: ./gradlew --version

      - name: Install PostgreSQL client
        run: |
          sudo apt-get update
          sudo apt-get install -y postgresql-client

      - name: Wait for Postgres to accept connections (max ~5 min)
        env:
          PGPASSWORD: ${{ env.DB_PASSWORD }}
        shell: bash
        run: |
          set -e
          echo "Waiting for Postgres at ${DB_HOST}:${DB_PORT} / db=${DB_NAME} ..."
          for i in {1..100}; do
            if pg_isready -h "${DB_HOST}" -p "${DB_PORT}" -d "${DB_NAME}" -U "${DB_USER}" >/dev/null 2>&1; then
              if psql "host=${DB_HOST} port=${DB_PORT} dbname=${DB_NAME} user=${DB_USER}" -c 'SELECT 1;' >/dev/null 2>&1; then
                echo "Postgres is ready."
                exit 0
              fi
            fi
            echo "Not ready yet (attempt $i). Sleeping 3s..."
            sleep 3
          done
          echo "Postgres did not become ready in time."
          exit 1

      - name: Liquibase update (prepare schema for jOOQ codegen)
        env:
          DB_HOST: ${{ env.DB_HOST }}
          DB_PORT: ${{ env.DB_PORT }}
          DB_NAME: ${{ env.DB_NAME }}
          DB_USER: ${{ env.DB_USER }}
          DB_PASSWORD: ${{ env.DB_PASSWORD }}
        run: ./gradlew --no-daemon liquibaseUpdate

      - name: Build & test (triggers jOOQ codegen)
        run: ./gradlew --no-daemon clean test build

      - name: Upload test report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: junit-report
          path: build/reports/tests/test

      - name: Upload jar
        if: success()
        uses: actions/upload-artifact@v4
        with:
          name: app-jar
          path: build/libs/*.jar
