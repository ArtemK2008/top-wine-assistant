plugins {
    id 'java'
    id 'org.springframework.boot' version '3.5.6'
    id 'io.spring.dependency-management' version '1.1.7'
    id 'nu.studer.jooq' version '9.0'
}

group = 'ru.topwine'
version = '0.0.1-SNAPSHOT'
description = 'Top Wine Assistant'

java {
    toolchain { languageVersion = JavaLanguageVersion.of(21) }
}

repositories { mavenCentral() }

configurations {
    compileOnly { extendsFrom annotationProcessor }

    liquibaseRuntime
}

ext['jooq.version'] = '3.19.26'

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-webflux'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-data-jdbc'
    implementation 'org.springframework.boot:spring-boot-starter-jooq'
    implementation "org.springframework.boot:spring-boot-starter-data-redis-reactive"
    implementation 'org.liquibase:liquibase-core'

    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'
    annotationProcessor 'org.projectlombok:lombok'

    runtimeOnly 'org.postgresql:postgresql'

    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'

    jooqGenerator 'org.postgresql:postgresql:42.7.3'

    liquibaseRuntime 'org.liquibase.ext:liquibase-postgresql:4.23.2'
    liquibaseRuntime 'org.postgresql:postgresql:42.7.3'
    liquibaseRuntime 'info.picocli:picocli:4.7.6'
}

tasks.register('liquibaseUpdate', JavaExec) {
    group = 'liquibase'
    description = 'Apply Liquibase changelog to the target database'
    classpath = configurations.liquibaseRuntime
    mainClass = 'liquibase.integration.commandline.Main'

    workingDir = file('src/main/resources')

    def dbHost = System.getenv('DB_HOST') ?: 'localhost'
    def dbPort = System.getenv('DB_PORT') ?: '5432'
    def dbName = System.getenv('DB_NAME') ?: 'topwine'
    def dbUser = System.getenv('DB_USER') ?: 'topwine'
    def dbPass = System.getenv('DB_PASSWORD') ?: 'topwine'

    args = [
            "--url=jdbc:postgresql://${dbHost}:${dbPort}/${dbName}",
            "--username=${dbUser}",
            "--password=${dbPass}",
            "--changeLogFile=db/changelog/db.changelog-master.yaml",
            "update"
    ]
}

jooq {
    version = '3.19.26'
    configurations {
        main {
            generateSchemaSourceOnCompilation = true
            generationTool {
                logging = org.jooq.meta.jaxb.Logging.WARN
                jdbc {
                    driver = 'org.postgresql.Driver'
                    url = "jdbc:postgresql://${System.getenv('DB_HOST') ?: 'localhost'}:${System.getenv('DB_PORT') ?: '5432'}/${System.getenv('DB_NAME') ?: 'topwine'}"
                    user = System.getenv('DB_USER') ?: 'topwine'
                    password = System.getenv('DB_PASSWORD') ?: 'topwine'
                }
                generator {
                    name = 'org.jooq.codegen.JavaGenerator'
                    database {
                        name = 'org.jooq.meta.postgres.PostgresDatabase'
                        inputSchema = 'public'
                        excludes = 'databasechangelog|databasechangeloglock'
                        forcedTypes {
                            forcedType {
                                name = 'JSONB'
                                includeTypes = 'JSONB'
                            }
                        }
                    }
                    target {
                        packageName = 'ru.topwine.assistant.jooq'
                        directory = 'build/generated-src/jooq/main'
                    }
                    generate {
                        javaTimeTypes = true
                        records = true
                        daos = false
                        pojos = false
                        deprecated = false
                        fluentSetters = false
                    }
                }
            }
        }
    }
}

tasks.named('generateJooq').configure { dependsOn(tasks.named('liquibaseUpdate')) }

tasks.named('test') { useJUnitPlatform() }
